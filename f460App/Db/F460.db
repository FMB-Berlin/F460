# F460 db
# vim: ts=2 sw=2
# ID string is > 40 chars. Thus the waveform here.
record(waveform,"$(Sys)$(Dev)IDN-I") {
  field(DESC, "Identification string")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(FTVL, "CHAR")
  field(NELM, "100")
  field(SCAN, "Passive")
  field(INP, "@F460.protocol getId(100) $(PORT) 0")
}

record(bo,"$(Sys)$(Dev)Cmd:RdIDN") {
  field(DESC, "Identification string")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(OUT, "@F460.protocol parseId($(Sys)$(Dev)) $(PORT) 0")
  field(ZNAM, "Read version")
  field(ONAM, "Read version")
}

record(stringin, "$(Sys)$(Dev)Model-I") {
  field(DESC, "Model number")
}
record(stringin, "$(Sys)$(Dev)Serial-I") {
  field(DESC, "Serial number")
}
record(stringin, "$(Sys)$(Dev)Firmware-I") {
  field(DESC, "Firmware revision")
}

record(longin, "$(Sys)$(Dev)ErrCode-Sts") {
  field(DESC, "Last error code")
  field(FLNK, "$(Sys)$(Dev)BErrors-I")
}

record(stringin, "$(Sys)$(Dev)ErrDesc-Sts") {
  field(DESC, "Last error description")
}

record(bo, "$(Sys)$(Dev)Cmd:AckErr") {
  field(DESC, "Acknowledge error")
  field(ZNAM, "Acknowledge error")
  field(ONAM, "Acknowledge error")
  
#  field(TPRO, 1)
  field(DTYP, "stream")
  field(OUT, "@F460.protocol readError($(Sys)$(Dev)) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)ErrCount-I")
  field(ZSV, "NO_ALARM")
  field(OSV, "NO_ALARM")
}

record(compress, "$(Sys)$(Dev)BErrors-I") {
  field(DESC, "Previous errors")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)ErrCode-Sts.VAL NPP")
  field(NSAM, "$(BUFSZ)")
}

record(bo,"$(Sys)$(Dev)Cmd:Abort") {
  field(DESC, "Abort")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol abort($(Sys)$(Dev)) $(PORT) 0")
  field(ZNAM, "Abort")
  field(ONAM, "Abort")
}

# State commands: init, save, recall, reset
record(bo, "$(Sys)$(Dev)Cmd:Init") {
  field(DESC, "Initiate on valid trigger")
  field(DTYP, "stream")
  field(ZNAM, "Init")
  field(ONAM, "Init")
  field(OUT, "@F460.protocol init() $(PORT) 0")
}

record(bo, "$(Sys)$(Dev)Cmd:Save") {
  field(DESC, "Save state to flash")
  field(DTYP, "stream")
  field(ZNAM, "Save")
  field(ONAM, "Save")
  field(OUT, "@F460.protocol save() $(PORT) 0")
}

record(bo, "$(Sys)$(Dev)Cmd:Recall") {
  field(DESC, "Recall state from flash")
  field(DTYP, "stream")
  field(ZNAM, "Recall")
  field(ONAM, "Recall")
  field(OUT, "@F460.protocol recall() $(PORT) 0")
}

record(bo, "$(Sys)$(Dev)Cmd:Reset") {
  field(DESC, "Reset device")
  field(DTYP, "stream")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
  field(OUT, "@F460.protocol reset() $(PORT) 0")
}

record(bo, "$(Sys)$(Dev)Cmd:Clear") {
  field(DESC, "Clear error bit")
  field(DTYP, "stream")
  field(ONAM, "Clear")
  field(ZNAM, "Clear")
  field(OUT, "@F460.protocol clear() $(PORT) 0")
}

record(seq, "$(Sys)$(Dev)Cmd:ResetSeq") {
  field(DESC, "Reset sequence")
  field(DLY1, "0.0")
  field(LNK1, "$(Sys)$(Dev)Cmd:Save PP")
  field(DLY2, "3.0")
  field(LNK2, "$(Sys)$(Dev)Cmd:Reset PP")
  field(DLY3, "4.0")
  field(LNK3, "$(Sys)$(Dev)Cmd:Recall PP")
  field(DLY4, "5.0")
  field(LNK4, "$(Sys)$(Dev)Cmd:Init PP")
}

# CALIB:COMP Compensation write for all channels
record(calcout, "$(Sys)$(Dev)DB:WrtComp_") {
  field(DESC, "Gain/offset compensation (all ch)")
  field(DTYP, "stream")
  field(CALC, "0")
  field(INPA, "$(Sys)$(Dev)Ch0:Gain-SP.VAL")
  field(INPB, "$(Sys)$(Dev)Ch0:Off-SP.VAL")
  field(INPC, "$(Sys)$(Dev)Ch1:Gain-SP.VAL")
  field(INPD, "$(Sys)$(Dev)Ch1:Off-SP.VAL")
  field(INPE, "$(Sys)$(Dev)Ch2:Gain-SP.VAL")
  field(INPF, "$(Sys)$(Dev)Ch2:Off-SP.VAL")
  field(INPG, "$(Sys)$(Dev)Ch3:Gain-SP.VAL")
  field(INPH, "$(Sys)$(Dev)Ch3:Off-SP.VAL")
  field(OUT, "@F460.protocol setComp($(Sys)$(Dev)) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Cmd:RdComp")
}

record(bo, "$(Sys)$(Dev)Cmd:WrtComp") {
  field(DESC, "Gain/offset compensation (all ch)")
  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  field(ZNAM, "Write")
  field(ONAM, "Write")
}

# CALIB:COMP Read all channels compensation settings
record(fanout, "$(Sys)$(Dev)Cmd:RdComp") {
  field(LNK1, "$(Sys)$(Dev)Ch0:RdComp")
  field(LNK2, "$(Sys)$(Dev)Ch1:RdComp")
  field(LNK3, "$(Sys)$(Dev)Ch2:RdComp")
  field(LNK4, "$(Sys)$(Dev)Ch3:RdComp")
}

## CALIB:SOUR : get/set internal calibration source
record(mbbo, "$(Sys)$(Dev)IntSrc-SP") {
  field(DESC, "Internal calibration source")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),CALIB:SOUR) $(PORT) 0")
  field(ZRST, "Channel 0")
  field(ONST, "Channel 1")
  field(TWST, "Channel 2")
  field(THST, "Channel 3")
  field(FRST, "External")
  field(FLNK, "$(Sys)$(Dev)IntSrc-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)IntSrc-I") {
  field(DESC, "Internal calibration source")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),CALIB:SOUR) $(PORT) 0")
  field(ZRST, "Channel 0")
  field(ONST, "Channel 1")
  field(TWST, "Channel 2")
  field(THST, "Channel 3")
}

record(bo, "$(Sys)$(Dev)Cmd:ExtSrc") {
  field(DESC, "External source")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(ONAM, "Set ext source")
  field(ZNAM, "Set ext source")
  field(OUT, "@F460.protocol writeIntArg($(Sys)$(Dev),CALIB:SOUR,5) $(PORT) 0")
}

## OUT:FREQuency (0~3) 
record(mbbo, "$(Sys)$(Dev)Freq-SP") {
  field(DESC, "TTL mapping frequency monitoring")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),OUT:FREQ) $(PORT) 0")
  field(ZRST, "Bipolar")
  field(ONST, "Positive only")
  field(TWST, "Negative only")
  field(THST, "Absolute")
  field(FLNK, "$(Sys)$(Dev)Freq-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Freq-I") {
  field(DESC, "TTL mapping frequency monitoring")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),OUT:FREQ) $(PORT) 0")
  field(ZRST, "Bipolar")
  field(ONST, "Positive only")
  field(TWST, "Negative only")
  field(THST, "Absolute")
}

# ## OUT:HIVOltage:MAXvalue (not yet supported)
# record(ao, "$(Sys)$(Dev)HIVO_MAX_OUT") {
#   field(DESC, "Max ext HV setting")
#   field(DTYP, "stream")
#   field(SCAN, "Passive")
#   field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),OUT:HIVO:MAX) $(PORT) 0")
#   field(EGU, "V")
#   field(FLNK, "$(Sys)$(Dev)HIVO_MAX_IN")
#   field(PREC, "$(PREC)")
#   info(autosaveFields_pass0, "VAL")
# }
# 
# record(ai, "$(Sys)$(Dev)HIVO_MAX_IN") {
#   field(DESC, "Max ext HV setting")
#   field(DTYP, "stream")
#   field(SCAN, "Passive")
#   field(PINI, "$(PINI)")
#   field(EGU, "V")
#   field(INP, "@F460.protocol readFloat($(Sys)$(Dev),OUT:HIVO:MAX) $(PORT) 0")
#   field(PREC, "$(PREC)")
# }

## OUT:HIVOltage:SUPply? (maximum allowable external HV)
record(ai, "$(Sys)$(Dev)HiVoSup-I") {
  field(DESC, "Max external HV setting")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol readFloatEGU($(Sys)$(Dev),OUT:HIVO:SUP,V) $(PORT) 0")
  field(PREC, "$(PREC)")
}

## OUT:HIVOltage:VOLts
record(ao, "$(Sys)$(Dev)HiVo-SP") {
  field(DESC, "HV1 voltage")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),OUT:HIVO:VOL) $(PORT) 0")
  field(EGU, "V")
  field(FLNK, "$(Sys)$(Dev)HiVo-I")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "$(Sys)$(Dev)HiVo-I") {
  field(DESC, "HV1 voltage")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol readFloatEGU($(Sys)$(Dev),OUT:HIVO:VOL,V) $(PORT) 0")
  field(PREC, "$(PREC)")
}

## FET:HIVOltage? 
#     Read HV readback ADC.  Returns {HV1}.
record(ai, "$(Sys)$(Dev)HiVoVolRbv-I") {
  field(DESC, "HV1 setting")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol readFloatEGU($(Sys)$(Dev),FET:HIVO,V) $(PORT) 0")
  field(PREC, "$(PREC)")
}

## OUT:HIVO:ENable - enable/disable HV power supply
record(bo, "$(Sys)$(Dev)Cmd:HiVoEn") {
  field(DESC, "HV supply enable")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),OUT:HIVO:EN) $(PORT) 0")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(FLNK, "$(Sys)$(Dev)HiVoEn-I")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(Sys)$(Dev)HiVoEn-I") {
  field(DESC, "HV supply enable")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),OUT:HIVO:EN) $(PORT) 0")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

## OUT:MONitor get/set position function
#      Set (query) the position function that is performed internally by the F460, and thus 
#       the signals that are put out on the analog voltage and frequency monitor outputs.
#      0 = no position calculation, monitor outputs map the input currents
#      1 = no position calculation, monitor outputs map the compensated input currents
#      2 = monitor outputs A and B map X and Y positions based on the currently set calculation
#      3 = monitor outputs are controlled or using PID
#
record(mbbo, "$(Sys)$(Dev)Mon-SP") {
  field(DESC, "Position function")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),OUT:MON) $(PORT) 0")
  field(ZRST, "Map input")
  field(ONST, "Map compensated")
  field(TWST, "Mon A,B map X,Y")
  field(THST, "PID")
  field(FLNK, "$(Sys)$(Dev)Mon-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Mon-I") {
  field(DESC, "Position function")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(ZRST, "Map input")
  field(ONST, "Map compensated")
  field(TWST, "Mon A,B map X,Y")
  field(THST, "PID")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),OUT:MON) $(PORT) 0")
}

## CONFigure:PERiod
# Set (query) averaging period Per in seconds.  Applies to all ranges.  
# Value will be corrected for 1/ADCrate granularity. 
record(ai, "$(Sys)$(Dev)Per-I") {
  field(DESC, "Averaging period for all ranges")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "sec")
  field(INP, "@F460.protocol readFloat($(Sys)$(Dev),CONF:PER) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Per-SP") {
  field(DESC, "Averaging period for all ranges")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),CONF:PER) $(PORT) 0")
  field(EGU, "sec")
  field(DRVL, "0.0")
  field(FLNK, "$(Sys)$(Dev)Per-I")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "VAL")
}


## FET:ANAlogIn? [numSamples]
#     Returns analog inputs for the numSamples most recent triggers for the two analog inputs.  
#     Returns: numSamples *{averaging period, anaIn1, anaIn2, timestamp, trigger count, CR LF}.  It is only possible to request multiple samples if TRIGger:BUFfer > 0.  Otherwise, numSamples  should be omitted.
#     Returns up to 12 samples.  If numSamples and TRIGger:BUFfer are greater than that, this command may be used multiple times to drain the buffer.
#
record(bo, "$(Sys)$(Dev)Cmd:RdAna") {
  field(DESC, "Analog inputs")
  field(DTYP, "stream")
  #field(SCAN, "Passive")
  #field(SCAN, "1 second")
  field(PINI, "$(PINI)")
  field(ZNAM, "Read analog")
  field(ONAM, "Read analog")
  field(OUT, "@F460.protocol get1Ana($(Sys)$(Dev),Ana) $(PORT) 0")
  #field(TPRO, 1)
}

record(ai, "$(Sys)$(Dev)Ana:Per") {
  field(DESC, "Analog input averaging period")
  field(EGU, "sec")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ana:Ai1") {
  field(DESC, "Analog input 1")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ana:Ai2") {
  field(DESC, "Analog input 2")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ana:Time-I") {
  field(DESC, "Analog input timestamp")
  field(EGU, "sec")
  field(PREC, "3")
}

record(longin, "$(Sys)$(Dev)Ana:TrigCnt-I") {
  field(DESC, "Analog input trigger count")
  #field(TPRO, 1)
  field(FLNK, "$(Sys)$(Dev)Ana:BPer-I")
}

#-
record(compress, "$(Sys)$(Dev)Ana:BPer-I") {
  field(DESC, "Analog input averaging period")
  field(EGU, "sec")
  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Ana:Per.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Ana:BAi1-I")
}

record(compress, "$(Sys)$(Dev)Ana:BAi1-I") {
  field(DESC, "Analog input 1")
  field(EGU, "V")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Ana:Ai1.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Ana:BAi2-I")
}

record(compress, "$(Sys)$(Dev)Ana:BAi2-I") {
  field(DESC, "Analog input 2")
  field(EGU, "V")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Ana:Ai2.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Ana:BTime")
}

record(compress, "$(Sys)$(Dev)Ana:BTime") {
  field(DESC, "Analog input timestamp")
  field(EGU, "sec")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Ana:Time-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Ana:BNum-I")
}

record(compress, "$(Sys)$(Dev)Ana:BNum-I") {
  field(DESC, "Analog input number of samples")
  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Ana:TrigCnt-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")
}

#
## FET:SENsor? [numSamples] 
#
#     Returns currents for the numSamples  most recent triggers for the four current input channels.  
#     Returns: numSamples *{averaging period, curr1, curr2, curr3, curr4, timestamp, trigger count, CR LF}.  It is only possible to request multiple samples if TRIGger:BUFfer > 0.  Otherwise, numSamples  should be omitted. 
#     Returns up to 12 samples.  If numSamples and TRIGger:BUFfer are greater than that, this command may be used multiple times to drain the buffer.
#
record(bo, "$(Sys)$(Dev)Cmd:RdSen") {
  field(DESC, "Read sensor inputs")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  #field(SCAN, "Passive")
  #field(SCAN, "1 second")
  field(ZNAM, "Read sensor")
  field(ONAM, "Read sensor")
  field(OUT, "@F460.protocol get1Sen($(Sys)$(Dev),Sen,SEN) $(PORT) 0")
  #field(TPRO, 1)
}

record(ai, "$(Sys)$(Dev)Sen:Per") {
  field(DESC, "Sensor input averaging period")
  field(EGU, "sec")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Sen:I0-I") {
  field(DESC, "Sensor input 0")
  field(EGU, "A")
  field(PREC, "$(PREC)")
  #field(TPRO, 1)
}

record(ai, "$(Sys)$(Dev)Sen:I1-I") {
  field(DESC, "Sensor input 1")
  field(EGU, "A")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Sen:I2-I") {
  field(DESC, "Sensor input 2")
  field(EGU, "A")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Sen:I3-I") {
  field(DESC, "Sensor input 3")
  field(EGU, "A")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Sen:Time-I") {
  field(DESC, "Sensor input timestamp")
  field(EGU, "sec")
  field(PREC, "3")
}

record(longin, "$(Sys)$(Dev)Sen:TrigCnt-I") {
  field(DESC, "Sensor input trigger count")
  #field(TPRO, 1)
  field(FLNK, "$(Sys)$(Dev)Sen:BPer-I")
}

#-
record(compress, "$(Sys)$(Dev)Sen:BPer-I") {
  field(DESC, "Sensor input averaging period")
  field(EGU, "sec")
  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Sen:Per.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Sen:BI0-I")
}

record(compress, "$(Sys)$(Dev)Sen:BI0-I") {
  field(DESC, "Sensor input 0 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Sen:I0-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Sen:BI1-I")
}

record(compress, "$(Sys)$(Dev)Sen:BI1-I") {
  field(DESC, "Sensor input 1 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Sen:I1-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Sen:BI2-I")
}
record(compress, "$(Sys)$(Dev)Sen:BI2-I") {
  field(DESC, "Sensor input 2 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Sen:I2-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Sen:BI3-I")
}
record(compress, "$(Sys)$(Dev)Sen:BI3-I") {
  field(DESC, "Sensor input 3 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Sen:I3-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Sen:BTime-I")
}

record(compress, "$(Sys)$(Dev)Sen:BTime-I") {
  field(DESC, "Sensor input timestamp")
  field(EGU, "sec")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Sen:Time-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Sen:BNum-I")
}

record(compress, "$(Sys)$(Dev)Sen:BNum-I") {
  field(DESC, "Sensor input number of samples")
  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Sen:TrigCnt-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")
}

#
#
## FET:CURrents? [numSamples]
#
#     Returns uncompensated currents for the numSamples  most recent triggers for the four current input channels.  
#     Returns: numSamples *{averaging period, curr1, curr2, curr3, curr4, timestamp, trigger count, CR LF}.  It is only possible to request multiple samples if TRIGger:BUFfer > 0.  Otherwise, numSamples  should be omitted.
#    
#     Returns up to 12 samples.  If numSamples and TRIGger:BUFfer are greater than that, this command may be used multiple times to drain the buffer.
record(bo, "$(Sys)$(Dev)Cmd:RdCur") {
  field(DESC, "Read current inputs")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(ZNAM, "Read current")
  field(ONAM, "Read current")
  field(OUT, "@F460.protocol get1Sen($(Sys)$(Dev),Cur,CUR) $(PORT) 0")
  #field(TPRO, 1)
  #field(SCAN, "Passive")
  #field(SCAN, "1 second")
}

record(ai, "$(Sys)$(Dev)Cur:Per") {
  field(DESC, "Current input averaging period")
  field(EGU, "sec")
  field(PREC, "3")
}

record(ai, "$(Sys)$(Dev)Cur:I0-I") {
  field(DESC, "Current input 0")
  field(EGU, "A")
  field(PREC, "$(PREC)")
  #field(TPRO, 1)
}

record(ai, "$(Sys)$(Dev)Cur:I1-I") {
  field(DESC, "Current input 1")
  field(EGU, "A")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Cur:I2-I") {
  field(DESC, "Current input 2")
  field(EGU, "A")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Cur:I3-I") {
  field(DESC, "Current input 3")
  field(EGU, "A")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Cur:Time-I") {
  field(DESC, "Current input timestamp")
  field(EGU, "sec")
  field(PREC, "3")
}

record(longin, "$(Sys)$(Dev)Cur:TrigCnt-I") {
  field(DESC, "Current input trigger count")
#  field(TPRO, 1)
  field(FLNK, "$(Sys)$(Dev)Cur:BPer-I")
}

#-
record(compress, "$(Sys)$(Dev)Cur:BPer-I") {
  field(DESC, "Current input averaging period")
  field(EGU, "sec")
  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Cur:Per.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Cur:BI0-I")
}

record(compress, "$(Sys)$(Dev)Cur:BI0-I") {
  field(DESC, "Current input 0 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Cur:I0-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Cur:BI1-I")
}

record(compress, "$(Sys)$(Dev)Cur:BI1-I") {
  field(DESC, "Current input 1 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Cur:I1-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Cur:BI2-I")
}
record(compress, "$(Sys)$(Dev)Cur:BI2-I") {
  field(DESC, "Current input 2 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Cur:I2-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Cur:BI3-I")
}
record(compress, "$(Sys)$(Dev)Cur:BI3-I") {
  field(DESC, "Current input 3 buffer")
  field(EGU, "A")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Cur:I3-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Cur:BTime-I")
}

record(compress, "$(Sys)$(Dev)Cur:BTime-I") {
  field(DESC, "Current input timestamp")
  field(EGU, "sec")

  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Cur:Time-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")

  field(FLNK, "$(Sys)$(Dev)Cur:BNum-I")
}

record(compress, "$(Sys)$(Dev)Cur:BNum-I") {
  field(DESC, "Current input number of samples")
  field(ALG, "Circular Buffer")
  field(INP, "$(Sys)$(Dev)Cur:TrigCnt-I.VAL NPP")
  field(NSAM, "$(BUFSZ)")
}
#
#
#
## FET:DIGital?
# Read digital status bits.
#   0 Connected
#   1 Pending/Busy
#   2 Error
#   3 Reserved
#   4 Output changed (NOT SUPPORTED)
#   5 Reserved
#   6 Urgent device error (NOT SUPPORTED)
#   7 Reserved
#   8 Updating firmware
#   9 Starting up
#   10-15 Reserved
#   16  Acquisition Running (Measuring)
#   17  Acquisition Paused  (Waiting for trigger)
#   18  Acquisition Stopped
#   23  BNC gate toggling (Triggering)

record(longin, "$(Sys)$(Dev)DigStat-I") {
  field(DESC, "Digital status information")
  field(DTYP, "stream")
  field(SCAN, "$(SCAN)")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),FET:DIG) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)DigStat1-I")
}

record(mbbiDirect, "$(Sys)$(Dev)DigStat1-I") {
  field(DESC, "Lower byte of status")
  field(DTYP, "Raw Soft Channel")
  field(INP, "$(Sys)$(Dev)DigStat-I")
  field(SHFT, "0")
  field(FLNK, "$(Sys)$(Dev)DigStat2-I")
}

record(mbbiDirect, "$(Sys)$(Dev)DigStat2-I") {
  field(DESC, "Upper byte of status")
  field(DTYP, "Raw Soft Channel")
  field(INP, "$(Sys)$(Dev)DigStat-I")
  field(SHFT, "16")
  field(FLNK, "$(Sys)$(Dev)Connected-I")
}

record(bi, "$(Sys)$(Dev)Connected-I"){
  field(DESC, "Connected status")
  field(INP, "$(Sys)$(Dev)DigStat1-I.B0")
  field(ZNAM, "Disconnected")
  field(ONAM, "Connected")
  field(ZSV, "NO_ALARM")
  field(OSV, "NO_ALARM")
  field(FLNK, "$(Sys)$(Dev)Busy-I")
}

record(bi, "$(Sys)$(Dev)Busy-I"){
  field(DESC, "Busy status")
  field(INP, "$(Sys)$(Dev)DigStat1-I.B1")
  field(ZNAM, "Not Busy")
  field(ONAM, "Busy")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
  field(FLNK, "$(Sys)$(Dev)Error-I")
}

record(bi, "$(Sys)$(Dev)Error-I"){
  field(DESC, "Error status")
  field(INP, "$(Sys)$(Dev)DigStat1-I.B2")
  field(ZNAM, "No Error")
  field(ONAM, "Error")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
  field(FLNK, "$(Sys)$(Dev)Starting-I")
}

record(bi, "$(Sys)$(Dev)Starting-I"){
  field(DESC, "Connected")
  field(INP, "$(Sys)$(Dev)DigStat1-I.B9")
  field(ZNAM, "Ready")
  field(ONAM, "Starting")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(FLNK, "$(Sys)$(Dev)Measuring-I")
}

record(bi, "$(Sys)$(Dev)Measuring-I"){
  field(DESC, "Acquisition running")
  field(INP, "$(Sys)$(Dev)DigStat2-I.B0")
  field(ZNAM, "Not Measuring")
  field(ONAM, "Measuring")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(FLNK, "$(Sys)$(Dev)Armed-I")
}

record(bi, "$(Sys)$(Dev)Armed-I"){
  field(DESC, "Acquisition paused (waiting on trigger)")
  field(INP, "$(Sys)$(Dev)DigStat2-I.B1")
  field(ZNAM, "Not Armed")
  field(ONAM, "Armed")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(FLNK, "$(Sys)$(Dev)Halt-I")
}

record(bi, "$(Sys)$(Dev)Halt-I"){
  field(DESC, "Acquistion stopped")
  field(INP, "$(Sys)$(Dev)DigStat2-I.B2")
  field(ZNAM, "Not Stopped")
  field(ONAM, "Stopped")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(FLNK, "$(Sys)$(Dev)Triggering-I")
}

record(bi, "$(Sys)$(Dev)Triggering-I"){
  field(DESC, "Gate toggeling (Triggering)")
  field(INP, "$(Sys)$(Dev)DigStat2-I.B7")
  field(ZNAM, "Inactive")
  field(ONAM, "Active")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
}


## SYST:COMMunication:TIMEout
#     Set (query) timeout in seconds.  0 = timeout disabled.  F460 will turn HV off if no valid message is received in the timeout period.  
record(ai, "$(Sys)$(Dev)Timeout-I") {
  field(DESC, "Comm timeout")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "sec")
  field(INP, "@F460.protocol readFloat($(Sys)$(Dev),SYST:COMM:TIME) $(PORT) 0")
  field(PREC, "3")
}

record(ao, "$(Sys)$(Dev)Timeout-SP") {
  field(DESC, "Comm timeout")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),SYST:COMM:TIME) $(PORT) 0")
  field(EGU, "sec")
  field(DRVL, "0.0")
  field(FLNK, "$(Sys)$(Dev)Timeout-I")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "VAL")
}

## SYST:COMMunication:IPMODE DHCP|Static
# Set (query) the IP address setting mode. NOTE: Changing this setting may cause loss of communication with the device for several seconds.
record(mbbo, "$(Sys)$(Dev)IpMode-SP") {
  field(DESC, "(TCP/IP) IP mode")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),SYST:COMM:IPMODE) $(PORT) 0")
  field(ZRST, "DHCP")
  field(ONST, "Static")
  field(FLNK, "$(Sys)$(Dev)Ipmode-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Ipmode-I") {
  field(DESC, "(TCP/IP) IP mode")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  #field(PINI, "YES")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readStr($(Sys)$(Dev),SYST:COMM:IPMODE) $(PORT) 0")
  field(ZRST, "DHCP")
  field(ONST, "Static")
}


#
## SYST:COMMunication:IPaddress x.x.x.x
# Set (query) the IP address.
record(stringout, "$(Sys)$(Dev)Ip-SP") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) IP")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),SYST:COMM:IP) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Ip-I")
  info(autosaveFields_pass0, "VAL")
}

record(stringin, "$(Sys)$(Dev)Ip-I") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) IP")
  #field(PINI, "YES")
  field(PINI, "$(PINI)")
  field(INP,"@F460.protocol readStr($(Sys)$(Dev),SYST:COMM:IP) $(PORT) 0")
}
#
## SYST:COMMunication:NETmask x.x.x.x
# Set (query) the subnet mask.
record(stringout, "$(Sys)$(Dev)Netmask-SP") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) Netmask")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),SYST:COMM:NET) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Netmask-I")
  info(autosaveFields_pass0, "VAL")
}

record(stringin, "$(Sys)$(Dev)Netmask-I") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) Netmask")
  field(PINI, "$(PINI)")
  field(INP,"@F460.protocol readStr($(Sys)$(Dev),SYST:COMM:NET) $(PORT) 0")
}
#
## SYST:COMMunication:GATEway x.x.x.x
# Set (query) the default gateway if IPMODE is Static.
record(stringout, "$(Sys)$(Dev)Gate-SP") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) Gateway")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),SYST:COMM:GATE) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Gate-I")
  info(autosaveFields_pass0, "VAL")
}

record(stringin, "$(Sys)$(Dev)Gate-I") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) Gateway")
  field(PINI, "$(PINI)")
  field(INP,"@F460.protocol readStr($(Sys)$(Dev),SYST:COMM:GATE) $(PORT) 0")
}

## SYST:COMMunication:LOGipaddress x.x.x.x
# Set (query) the system log IP address.
record(stringout, "$(Sys)$(Dev)LogIp-SP") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) Log IP")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),SYST:COMM:LOG) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)LogIp-I")
  info(autosaveFields_pass0, "VAL")
}

record(stringin, "$(Sys)$(Dev)LogIp-I") {
  field(DTYP, "stream")
  field(DESC, "(TCP/IP) Log IP")
  field(PINI, "$(PINI)")
  field(INP,"@F460.protocol readStr($(Sys)$(Dev),SYST:COMM:LOG) $(PORT) 0")
}

## SYST:SERIALnumber?
# Query the serial number of the F460.
record(stringin, "$(Sys)$(Dev)Serial-I") {
  field(DTYP, "stream")
  field(DESC, "Serial number")
  field(PINI, "$(PINI)")
  field(INP,"@F460.protocol readStr($(Sys)$(Dev),SYST:SERIAL) $(PORT) 0")
}

#
## SYST:ERRor:COUNt?
# Query the error/event queue for the number of unread items.  As errors and events may occur at any time, more items may be present in the queue at the time it is actually read.
record(longin, "$(Sys)$(Dev)ErrCount-I") {
  field(DESC, "Error count")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  #field(PINI, "YES")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),SYST:ERR:COUN) $(PORT) 0")
}

## TRIGger:BUFfer {size}  
# Set (query) the F460 on-board data buffer size (stop count).
# Setting a buffer size > 0 enables buffered mode.
record(longout, "$(Sys)$(Dev)BufSz-SP") {
  field(DESC, "Trigger buffer size")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),TRIG:BUF) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)BufSz-I")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(Sys)$(Dev)BufSz-I") {
  field(DESC, "Trigger buffer size")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  #field(PINI, "YES")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),TRIG:BUF) $(PORT) 0")
}

## TRIGger:BURst {count}  
# Set (query) the number of samples acquired in a burst (i.e. before a pause).  This is 1 in EXTERNAL_START_HOLD mode.
#
record(longout, "$(Sys)$(Dev)Burst-SP") {
  field(DESC, "Trigger burst samples")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),TRIG:BUR) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Burst-I")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(Sys)$(Dev)Burst-I") {
  field(DESC, "Trigger burst samples")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  #field(PINI, "YES")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),TRIG:BUR) $(PORT) 0")
}
#
#
## TRIGger:MODE {mode}  
# Set (query) the trigger mode to mode .  The options are: CUSTom, INTernal, EXTERNAL_START, EXTERNAL_START_STOP, EXTERNAL_START_HOLD, EXTERNAL_WINDOWED, 
record(mbbo, "$(Sys)$(Dev)Cmd:TrigMode") {
  field(DESC, "Trigger mode")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),TRIG:MODE) $(PORT) 0")

  field(ZRST, "CUSTom")
  field(ONST, "INTernal")
  field(TWST, "EXTERNAL_START")
  field(THST, "EXTERNAL_START_STOP")
  field(FRST, "EXTERNAL_START_HOLD")
  field(FVST, "EXTERNAL_WINDOWED")
  field(FLNK, "$(Sys)$(Dev)TrigMode-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)TrigMode-I") {
  field(DESC, "Trigger mode")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  #field(PINI, "$(PINI)")
  field(PINI, "YES")
  field(INP, "@F460.protocol readStr($(Sys)$(Dev),TRIG:MODE) $(PORT) 0")

  field(ZRST, "CUSTom")
  field(ONST, "INTernal")
  field(TWST, "EXTERNAL_START")
  field(THST, "EXTERNAL_START_STOP")
  field(FRST, "EXTERNAL_START_HOLD")
  field(FVST, "EXTERNAL_WINDOWED")
}

## TRIGger:POLarity {0|1} 
# Set (query) external gate polarity (external trigger only). 0 = rising edge, 1 = falling edge (invert BNC trigger)
record(bo, "$(Sys)$(Dev)TrigPol-SP") {
  field(DESC, "Trigger polarity")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),TRIG:POL) $(PORT) 0")
  field(ZNAM, "Rising")
  field(ONAM, "Falling")
  field(FLNK, "$(Sys)$(Dev)TrigPol-I")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(Sys)$(Dev)TrigPol-I") {
  field(DESC, "Read trigger polarity")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),TRIG:POL) $(PORT) 0")
  field(ZNAM, "Rising")
  field(ONAM, "Falling")
}
#
#
#
## TRIGger:SOURce:STARt {INTernal|BNC}
# Set (query) the start trigger source.  Used in CUSTom, EXTERNAL_START, EXTERNAL_STARTSTOP, EXTERNAL_START_HOLD, and EXTERNAL_WINDOWED modes.
record(mbbo, "$(Sys)$(Dev)Cmd:TrigStart") {
  field(DESC, "Trigger start")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),TRIG:SOUR:STAR) $(PORT) 0")
  field(ZRST, "INTernal")
  field(ONST, "BNC")
  field(FLNK, "$(Sys)$(Dev)TrigStart-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)TrigStart-I") {
  field(DESC, "Trigger start")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  #field(PINI, "YES")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readStr($(Sys)$(Dev),TRIG:SOUR:STAR) $(PORT) 0")
  field(ZRST, "INTernal")
  field(ONST, "BNC")
}
#
#
## TRIGger:SOURce:STOP {INTernal|BNC}
# Set (query) the stop trigger source.  Used in CUSTom and EXTERNAL_STARTSTOP modes.
record(mbbo, "$(Sys)$(Dev)Cmd:TrigStop") {
  field(DESC, "Trigger stop")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),TRIG:SOUR:STOP) $(PORT) 0")
  field(ZRST, "INTernal")
  field(ONST, "BNC")
  field(FLNK, "$(Sys)$(Dev)TrigStop-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)TrigStop-I") {
  field(DESC, "Trigger stop")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  #field(PINI, "YES")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readStr($(Sys)$(Dev),TRIG:SOUR:STOP) $(PORT) 0")
  field(ZRST, "INTernal")
  field(ONST, "BNC")
}
#
## TRIGger:SOURce:PAUse {INTernal|BNC}
# Set (query) the pause/burst trigger source.  Used in CUSTom and EXTERNAL_WINDOWED modes.

record(mbbo, "$(Sys)$(Dev)Cmd:TrigPause") {
  field(DESC, "Trigger pause")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeStr($(Sys)$(Dev),TRIG:SOUR:PAU) $(PORT) 0")
  field(ZRST, "INTernal")
  field(ONST, "BNC")
  field(FLNK, "$(Sys)$(Dev)TrigPause-I")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)TrigPause-I") {
  field(DESC, "Trigger pause")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readStr($(Sys)$(Dev),TRIG:SOUR:PAU) $(PORT) 0")
  field(ZRST, "INTernal")
  field(ONST, "BNC")
}


## Single reading mode
record(seq, "$(Sys)$(Dev)Cmd:Single") {
  field(DESC, "Single reading mode")

  field(DLY1, "0.01")
  field(DOL1, "1")
  field(LNK1, "$(Sys)$(Dev)Cmd:Init.PROC")

  field(DLY2, "0.00")
  field(DOL2, "1")
  field(LNK2, "$(Sys)$(Dev)BufSz-SP.VAL")

  field(DLY3, "0.05")
  field(DOL3, "1")
  field(LNK3, "$(Sys)$(Dev)Cmd:RdCur.PROC")

  info(autosaveFields_pass0, "SCAN")
}
# F460 per-channel settings
# vim: ts=2 sw=2

## CALIB:COMP? -- gains and offsets
record(ai, "$(Sys)$(Dev)Ch0:Gain-I") {
  field(DESC, "Ch0 gain")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch0:Off-I") {
  field(DESC, "Ch0 offset")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Ch0:Gain-SP") {
  field(DESC, "Ch0 gain setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(Sys)$(Dev)Ch0:Off-SP") {
  field(DESC, "Ch0 offset setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(Sys)$(Dev)Ch0:RdComp") {
  field(DESC, "Read compensation")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getComp($(Sys)$(Dev),0,Ch0:Gain-I,Ch0:Off-I) $(PORT) 0")
  field(PINI, "$(PINI)")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(FLNK, "$(Sys)$(Dev)Ch0:RdRange")
}


record(ai, "$(Sys)$(Dev)Ch0:R1:Gain-I") {
  field(DESC, "Ch0 gain range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R2:Gain-I") {
  field(DESC, "Ch0 gain range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R3:Gain-I") {
  field(DESC, "Ch0 gain range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R4:Gain-I") {
  field(DESC, "Ch0 gain range 4")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch0:R1:Off-I") {
  field(DESC, "Ch0 offset range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R2:Off-I") {
  field(DESC, "Ch0 offset range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R3:Off-I") {
  field(DESC, "Ch0 offset range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R4:Off-I") {
  field(DESC, "Ch0 offset range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch0:RdRange") {
  field(DESC, "Read range")
  field(DTYP, "stream")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(OUT, "@F460.protocol getRGain($(Sys)$(Dev),Ch0:R,0,Gain-I,Off-I) $(PORT) 0")
  field(TPRO, 1)
  field(FLNK, "$(Sys)$(Dev)Ch0:RdMax")
}

## CALIB:RAN? -- range maxes
record(ai, "$(Sys)$(Dev)Ch0:R1:Max-I") {
  field(DESC, "Ch0 max range 1")
  #field(TPRO, "1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R2:Max-I") {
  field(DESC, "Ch0 max range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R3:Max-I") {
  field(DESC, "Ch0 max range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch0:R4:Max-I") {
  field(DESC, "Ch0 max range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch0:RdMax") {
  field(DESC, "Read range max")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getRangeMax($(Sys)$(Dev),Ch0:R,0,Max-I) $(PORT) 0")
  field(ZNAM, "Read")
  field(ONAM, "Read")
}

## CONF:RANge chan range -- which number range to use
record(mbbo, "$(Sys)$(Dev)Ch0:Range-SP") {
  field(DTYP, "stream")
  field(DESC, "Ch0 range")
  field(OUT, "@F460.protocol writeChInt($(Sys)$(Dev),CONF:RAN,0) $(PORT) 0")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(FLNK, "$(Sys)$(Dev)Ch0:Range-I")
  
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Ch0:Range-I") {
  field(DTYP, "stream")
  field(DESC, "Ch0 range")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(INP, "@F460.protocol readChInt($(Sys)$(Dev),CONF:RAN,0) $(PORT) 0")
}

## OUT:ANAlog 
# Only available if OUTput:MONitor is set to mode 3 and
# PID is not being run for the particular output.
# Otherwise, these outputs are active as monitors.
record(ao, "$(Sys)$(Dev)Ch0:Ana-SP") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(Sys)$(Dev),OUT:ANA,0) $(PORT) 0")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Ch0:Ana-I")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "$(Sys)$(Dev)Ch0:Ana-I") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol readChFloat($(Sys)$(Dev),OUT:ANA,0) $(PORT) 0")
  field(PREC, "$(PREC)")
}

# F460 per-channel settings
# vim: ts=2 sw=2

## CALIB:COMP? -- gains and offsets
record(ai, "$(Sys)$(Dev)Ch1:Gain-I") {
  field(DESC, "Ch1 gain")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch1:Off-I") {
  field(DESC, "Ch1 offset")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Ch1:Gain-SP") {
  field(DESC, "Ch1 gain setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(Sys)$(Dev)Ch1:Off-SP") {
  field(DESC, "Ch1 offset setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(Sys)$(Dev)Ch1:RdComp") {
  field(DESC, "Read compensation")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getComp($(Sys)$(Dev),1,Ch1:Gain-I,Ch1:Off-I) $(PORT) 0")
  field(PINI, "$(PINI)")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(FLNK, "$(Sys)$(Dev)Ch1:RdRange")
}


record(ai, "$(Sys)$(Dev)Ch1:R1:Gain-I") {
  field(DESC, "Ch1 gain range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R2:Gain-I") {
  field(DESC, "Ch1 gain range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R3:Gain-I") {
  field(DESC, "Ch1 gain range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R4:Gain-I") {
  field(DESC, "Ch1 gain range 4")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch1:R1:Off-I") {
  field(DESC, "Ch1 offset range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R2:Off-I") {
  field(DESC, "Ch1 offset range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R3:Off-I") {
  field(DESC, "Ch1 offset range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R4:Off-I") {
  field(DESC, "Ch1 offset range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch1:RdRange") {
  field(DESC, "Read range")
  field(DTYP, "stream")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(OUT, "@F460.protocol getRGain($(Sys)$(Dev),Ch1:R,1,Gain-I,Off-I) $(PORT) 0")
  field(TPRO, 1)
  field(FLNK, "$(Sys)$(Dev)Ch1:RdMax")
}

## CALIB:RAN? -- range maxes
record(ai, "$(Sys)$(Dev)Ch1:R1:Max-I") {
  field(DESC, "Ch1 max range 1")
  #field(TPRO, "1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R2:Max-I") {
  field(DESC, "Ch1 max range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R3:Max-I") {
  field(DESC, "Ch1 max range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch1:R4:Max-I") {
  field(DESC, "Ch1 max range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch1:RdMax") {
  field(DESC, "Read range max")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getRangeMax($(Sys)$(Dev),Ch1:R,1,Max-I) $(PORT) 0")
  field(ZNAM, "Read")
  field(ONAM, "Read")
}

## CONF:RANge chan range -- which number range to use
record(mbbo, "$(Sys)$(Dev)Ch1:Range-SP") {
  field(DTYP, "stream")
  field(DESC, "Ch1 range")
  field(OUT, "@F460.protocol writeChInt($(Sys)$(Dev),CONF:RAN,1) $(PORT) 0")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(FLNK, "$(Sys)$(Dev)Ch1:Range-I")
  
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Ch1:Range-I") {
  field(DTYP, "stream")
  field(DESC, "Ch1 range")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(INP, "@F460.protocol readChInt($(Sys)$(Dev),CONF:RAN,1) $(PORT) 0")
}

## OUT:ANAlog 
# Only available if OUTput:MONitor is set to mode 3 and
# PID is not being run for the particular output.
# Otherwise, these outputs are active as monitors.
record(ao, "$(Sys)$(Dev)Ch1:Ana-SP") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(Sys)$(Dev),OUT:ANA,1) $(PORT) 0")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Ch1:Ana-I")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "$(Sys)$(Dev)Ch1:Ana-I") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol readChFloat($(Sys)$(Dev),OUT:ANA,1) $(PORT) 0")
  field(PREC, "$(PREC)")
}

# F460 per-channel settings
# vim: ts=2 sw=2

## CALIB:COMP? -- gains and offsets
record(ai, "$(Sys)$(Dev)Ch2:Gain-I") {
  field(DESC, "Ch2 gain")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch2:Off-I") {
  field(DESC, "Ch2 offset")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Ch2:Gain-SP") {
  field(DESC, "Ch2 gain setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(Sys)$(Dev)Ch2:Off-SP") {
  field(DESC, "Ch2 offset setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(Sys)$(Dev)Ch2:RdComp") {
  field(DESC, "Read compensation")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getComp($(Sys)$(Dev),2,Ch2:Gain-I,Ch2:Off-I) $(PORT) 0")
  field(PINI, "$(PINI)")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(FLNK, "$(Sys)$(Dev)Ch2:RdRange")
}


record(ai, "$(Sys)$(Dev)Ch2:R1:Gain-I") {
  field(DESC, "Ch2 gain range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R2:Gain-I") {
  field(DESC, "Ch2 gain range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R3:Gain-I") {
  field(DESC, "Ch2 gain range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R4:Gain-I") {
  field(DESC, "Ch2 gain range 4")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch2:R1:Off-I") {
  field(DESC, "Ch2 offset range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R2:Off-I") {
  field(DESC, "Ch2 offset range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R3:Off-I") {
  field(DESC, "Ch2 offset range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R4:Off-I") {
  field(DESC, "Ch2 offset range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch2:RdRange") {
  field(DESC, "Read range")
  field(DTYP, "stream")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(OUT, "@F460.protocol getRGain($(Sys)$(Dev),Ch2:R,2,Gain-I,Off-I) $(PORT) 0")
  field(TPRO, 1)
  field(FLNK, "$(Sys)$(Dev)Ch2:RdMax")
}

## CALIB:RAN? -- range maxes
record(ai, "$(Sys)$(Dev)Ch2:R1:Max-I") {
  field(DESC, "Ch2 max range 1")
  #field(TPRO, "1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R2:Max-I") {
  field(DESC, "Ch2 max range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R3:Max-I") {
  field(DESC, "Ch2 max range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch2:R4:Max-I") {
  field(DESC, "Ch2 max range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch2:RdMax") {
  field(DESC, "Read range max")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getRangeMax($(Sys)$(Dev),Ch2:R,2,Max-I) $(PORT) 0")
  field(ZNAM, "Read")
  field(ONAM, "Read")
}

## CONF:RANge chan range -- which number range to use
record(mbbo, "$(Sys)$(Dev)Ch2:Range-SP") {
  field(DTYP, "stream")
  field(DESC, "Ch2 range")
  field(OUT, "@F460.protocol writeChInt($(Sys)$(Dev),CONF:RAN,2) $(PORT) 0")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(FLNK, "$(Sys)$(Dev)Ch2:Range-I")
  
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Ch2:Range-I") {
  field(DTYP, "stream")
  field(DESC, "Ch2 range")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(INP, "@F460.protocol readChInt($(Sys)$(Dev),CONF:RAN,2) $(PORT) 0")
}

## OUT:ANAlog 
# Only available if OUTput:MONitor is set to mode 3 and
# PID is not being run for the particular output.
# Otherwise, these outputs are active as monitors.
record(ao, "$(Sys)$(Dev)Ch2:Ana-SP") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(Sys)$(Dev),OUT:ANA,2) $(PORT) 0")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Ch2:Ana-I")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "$(Sys)$(Dev)Ch2:Ana-I") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol readChFloat($(Sys)$(Dev),OUT:ANA,2) $(PORT) 0")
  field(PREC, "$(PREC)")
}

# F460 per-channel settings
# vim: ts=2 sw=2

## CALIB:COMP? -- gains and offsets
record(ai, "$(Sys)$(Dev)Ch3:Gain-I") {
  field(DESC, "Ch3 gain")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch3:Off-I") {
  field(DESC, "Ch3 offset")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Ch3:Gain-SP") {
  field(DESC, "Ch3 gain setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(Sys)$(Dev)Ch3:Off-SP") {
  field(DESC, "Ch3 offset setpoint")
  field(PREC, "$(PREC)")

#  field(FLNK, "$(Sys)$(Dev)DB:WrtComp_")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(Sys)$(Dev)Ch3:RdComp") {
  field(DESC, "Read compensation")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getComp($(Sys)$(Dev),3,Ch3:Gain-I,Ch3:Off-I) $(PORT) 0")
  field(PINI, "$(PINI)")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(FLNK, "$(Sys)$(Dev)Ch3:RdRange")
}


record(ai, "$(Sys)$(Dev)Ch3:R1:Gain-I") {
  field(DESC, "Ch3 gain range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R2:Gain-I") {
  field(DESC, "Ch3 gain range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R3:Gain-I") {
  field(DESC, "Ch3 gain range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R4:Gain-I") {
  field(DESC, "Ch3 gain range 4")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Ch3:R1:Off-I") {
  field(DESC, "Ch3 offset range 1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R2:Off-I") {
  field(DESC, "Ch3 offset range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R3:Off-I") {
  field(DESC, "Ch3 offset range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R4:Off-I") {
  field(DESC, "Ch3 offset range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch3:RdRange") {
  field(DESC, "Read range")
  field(DTYP, "stream")
  field(ZNAM, "Read")
  field(ONAM, "Read")
  field(OUT, "@F460.protocol getRGain($(Sys)$(Dev),Ch3:R,3,Gain-I,Off-I) $(PORT) 0")
  field(TPRO, 1)
  field(FLNK, "$(Sys)$(Dev)Ch3:RdMax")
}

## CALIB:RAN? -- range maxes
record(ai, "$(Sys)$(Dev)Ch3:R1:Max-I") {
  field(DESC, "Ch3 max range 1")
  #field(TPRO, "1")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R2:Max-I") {
  field(DESC, "Ch3 max range 2")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R3:Max-I") {
  field(DESC, "Ch3 max range 3")
  field(PREC, "$(PREC)")
}
record(ai, "$(Sys)$(Dev)Ch3:R4:Max-I") {
  field(DESC, "Ch3 max range 4")
  field(PREC, "$(PREC)")
}

record(bo, "$(Sys)$(Dev)Ch3:RdMax") {
  field(DESC, "Read range max")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol getRangeMax($(Sys)$(Dev),Ch3:R,3,Max-I) $(PORT) 0")
  field(ZNAM, "Read")
  field(ONAM, "Read")
}

## CONF:RANge chan range -- which number range to use
record(mbbo, "$(Sys)$(Dev)Ch3:Range-SP") {
  field(DTYP, "stream")
  field(DESC, "Ch3 range")
  field(OUT, "@F460.protocol writeChInt($(Sys)$(Dev),CONF:RAN,3) $(PORT) 0")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(FLNK, "$(Sys)$(Dev)Ch3:Range-I")
  
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Ch3:Range-I") {
  field(DTYP, "stream")
  field(DESC, "Ch3 range")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(ZRST, "Range 1")
  field(ONST, "Range 2")
  field(TWST, "Range 3")
  field(THST, "Range 4")
  field(INP, "@F460.protocol readChInt($(Sys)$(Dev),CONF:RAN,3) $(PORT) 0")
}

## OUT:ANAlog 
# Only available if OUTput:MONitor is set to mode 3 and
# PID is not being run for the particular output.
# Otherwise, these outputs are active as monitors.
record(ao, "$(Sys)$(Dev)Ch3:Ana-SP") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(Sys)$(Dev),OUT:ANA,3) $(PORT) 0")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Ch3:Ana-I")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "$(Sys)$(Dev)Ch3:Ana-I") {
  field(DESC, "Analog output value")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol readChFloat($(Sys)$(Dev),OUT:ANA,3) $(PORT) 0")
  field(PREC, "$(PREC)")
}

# PID settings
#
## CONFigure:PID:MODE {Mode}
#        Set (query) the PID mode for PID number PIDNo, PIDNo = 1 or 2.
#        Mode options for process variable:
#        0:  Custom
#        1:  I1
#        2:  I1+I2
#        3:  I1-I2
#        4:  I1/I2
#        5:  X
#        6:  Y
#        7:  I1+I2+I3+I4
#        
#        8:  Custom
#        9:  I1
#       10:  I1+I2
#       11:  I1-I2
#       12:  I1/I2
#       13:  X
#       14:  Y
#       15:  I1+I2+I3+I4
record(mbbo, "$(Sys)$(Dev)Pid:Mode-SP") {
  field(DESC, "PID mode")
  field(SCAN, "Passive")
  field(DTYP, "stream")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),CONF:PID:MOD) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Pid:Mode-I")

  field(ZRVL, 0)
  field(ONVL, 1)
  field(TWVL, 2)
  field(THVL, 3)
  field(FRVL, 4)
  field(FVVL, 5)
  field(SXVL, 6)
  field(SVVL, 7)
  field(EIVL, 257)
  field(NIVL, 258)
  field(TEVL, 258)
  field(ELVL, 260)
  field(TVVL, 261)
  field(TTVL, 262)
  field(FTVL, 263)

  field(ZRST, "Off")
  field(ONST, "PID I1")
  field(TWST, "PID I1+I2")
  field(THST, "PID I1-I2")
  field(FRST, "PID I1/I2")
  field(FVST, "PID X")
  field(SXST, "PID Y")
  field(SVST, "PID I1+I2+I3+I4")
  field(EIST, "Profile I1")
  field(NIST, "Profile I1+I2")
  field(TEST, "Profile I1-I2")
  field(ELST, "Profile I1/I2")
  field(TVST, "Profile X")
  field(TTST, "Profile Y")
  field(FTST, "Profile I1+I2+I3+I4")

  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(Sys)$(Dev)Pid:Mode-I") {
  field(DESC, "PID mode")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),CONF:PID:MOD) $(PORT) 0")

  field(ZRVL, 0)
  field(ONVL, 1)
  field(TWVL, 2)
  field(THVL, 3)
  field(FRVL, 4)
  field(FVVL, 5)
  field(SXVL, 6)
  field(SVVL, 7)
  field(EIVL, 257)
  field(NIVL, 258)
  field(TEVL, 258)
  field(ELVL, 260)
  field(TVVL, 261)
  field(TTVL, 262)
  field(FTVL, 263)

  field(ZRST, "Off")
  field(ONST, "PID I1")
  field(TWST, "PID I1+I2")
  field(THST, "PID I1-I2")
  field(FRST, "PID I1/I2")
  field(FVST, "PID X")
  field(SXST, "PID Y")
  field(SVST, "PID I1+I2+I3+I4")
  field(EIST, "Profile I1")
  field(NIST, "Profile I1+I2")
  field(TEST, "Profile I1-I2")
  field(ELST, "Profile I1/I2")
  field(TVST, "Profile X")
  field(TTST, "Profile Y")
  field(FTST, "Profile I1+I2+I3+I4")
  field(ZRST, "Off")
}


# CONF:PID:LIMit {LO, HI}
#     Set (query) the control output analog limits for servo PIDNo to LO and HI (in range -10V to +10V). 
#     Control output for PIDNo=1 is analog output 1
#     Control output for PIDNo=2 is analog output 2
record(ai, "$(Sys)$(Dev)Pid:Lo-I") {
  field(DESC, "PID low limit")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol getLimit($(Sys)$(Dev),Pid:,CONF:PID:LIM) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Pid:Hi-I") {
  field(DESC, "PID high limit")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Pid:Lo-SP") {
  field(DESC, "PID low lim")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Pid:Cmd:Lim")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(Sys)$(Dev)Pid:Hi-SP") {
  field(DESC, "PID high lim")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Pid:Cmd:Lim")
  info(autosaveFields_pass0, "VAL")
}

record(calcout, "$(Sys)$(Dev)Pid:Cmd:Lim") {
  field(DESC, "PID write limits")
  field(DTYP, "stream")
  field(CALC, "0")
  field(INPA, "$(Sys)$(Dev)Pid:Lo-SP")
  field(INPB, "$(Sys)$(Dev)Pid:Hi-SP")
  field(OUT, "@F460.protocol setLimit($(Sys)$(Dev),PID,CONF:PID:LIM) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Pid:Lo-I")
  info(autosaveFields_pass0, "VAL A B")
}

# CONF:PID:ILOW {SigI}
#     Set (query) the sum SigI amps of the input currents used to form the process variable for PIDNo  
#     in the selected mode, below which the servo will be suspended

record(ai, "$(Sys)$(Dev)Pid:Sig-I") {
  field(DESC, "PID SigI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "A")
  field(INP, "@F460.protocol readFloat($(Sys)$(Dev),CONF:PID:ILOW) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Pid:Sig-SP") {
  field(DESC, "PID SigI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),CONF:PID:ILOW) $(PORT) 0")
  field(EGU, "A")
  field(FLNK, "$(Sys)$(Dev)Pid:Sig-I")
  info(autosaveFields_pass0, "VAL")
}

# CONF:PID:KP {Prop}
#     Set (query) the proportional parameter for servo PIDNo to Prop.
#
record(ai, "$(Sys)$(Dev)Pid:Kp-I") {
  field(DESC, "PID KP")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readFloat($(Sys)$(Dev),CONF:PID:KP) $(PORT) 0")
  field(TPRO, 1)
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Pid:Kp-SP") {
  field(DESC, "PID KP")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),CONF:PID:KP) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Pid:Kp-I")
  field(TPRO, 1)
  info(autosaveFields_pass0, "VAL")
}

# CONF:PID:KI {Prop}
#     Set (query) the integral parameter for servo PIDNo to Int.
record(ai, "$(Sys)$(Dev)Pid:Ki-I") {
  field(DESC, "PID KI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readFloat($(Sys)$(Dev),CONF:PID:KI) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Pid:Ki-SP") {
  field(DESC, "PID KI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),CONF:PID:KI) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Pid:Ki-I")
  info(autosaveFields_pass0, "VAL")
}

# CONF:PID:REF
#     Set (query) the reference value that is divided out from all
#     sensor values for PID
record(ai, "$(Sys)$(Dev)Pid:Ref-I") {
  field(DESC, "PID reference")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readFloat($(Sys)$(Dev),CONF:PID:REF) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Pid:Ref-SP") {
  field(DESC, "PID reference")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),CONF:PID:REF) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Pid:Ref-I")
  info(autosaveFields_pass0, "VAL DOL")
}

# CONF:PID:PROF:LIMit LO, HI, NumPts
#     Set (query) the low and high DAC limits in volts for the automated sweep for servo PIDNo.  
#     The sweep will use the number of points set as the buffer size.
#     TODO: cannot query with this command
record(ai, "$(Sys)$(Dev)Pid:DacLo-I") {
  field(DESC, "Profile low DAC limit")
  field(DTYP, "stream")
  field(INP, "@F460.protocol getProfLimit($(Sys)$(Dev),Pid:) $(PORT) 0")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(ai, "$(Sys)$(Dev)Pid:DacHi-I") {
  field(DESC, "Profile high DAC limit")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(longin, "$(Sys)$(Dev)Pid:Npt-I") {
  field(DESC, "Profile points")
  field(DTYP, "Soft Channel")
}

record(ao, "$(Sys)$(Dev)Pid:DacLo-SP") {
  field(DESC, "Profile DAC low")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Pid:WrDaclim")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(Sys)$(Dev)Pid:DacHi-SP") {
  field(DESC, "Profile DAC high")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(Sys)$(Dev)Pid:WrDaclim")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(Sys)$(Dev)Pid:Npt-SP") {
  field(DESC, "Profile points")
  field(DTYP, "Soft Channel")
  field(FLNK, "$(Sys)$(Dev)Pid:WrDaclim")
  info(autosaveFields_pass0, "VAL")
}

record(calcout, "$(Sys)$(Dev)Pid:WrDaclim") {
  field(DESC, "PID Write DAC limits")
  field(DTYP, "stream")
  field(CALC, "0")
  field(INPA, "$(Sys)$(Dev)Pid:DacLo-SP")
  field(INPB, "$(Sys)$(Dev)Pid:DacHi-SP")
  field(OUT, "@F460.protocol setProfLimit($(Sys)$(Dev),PID) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Pid:DacLo-I")
  info(autosaveFields_pass0, "VAL A B")
}

## PID:PROFile pidno 0|1
#     Set (query) automatic profile state for servo PIDNo
#     The profile will remain enabled until either turned off by this command, or 
#     when all data points have been read and the profile is completed.

record(bo, "$(Sys)$(Dev)Pid:Prof-SP") {
  field(DESC, "PID profile enable")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),PID:PROF) $(PORT) 0")
  field(ZNAM, "Profile off")
  field(ONAM, "Profile on")
  field(FLNK, "$(Sys)$(Dev)Pid:Prof-I")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(Sys)$(Dev)Pid:Prof-I") {
  field(DESC, "PID Profile enable")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readInt($(Sys)$(Dev),PID:PROF) $(PORT) 0")
  field(ZNAM, "Profile off")
  field(ONAM, "Profile on")
}


# CONF:PID:RATE {Per}
# Set (query) the servo period for PIDNo to Per seconds (Per >= 1/200) 

record(ai, "$(Sys)$(Dev)Pid:Rate-I") {
  field(DESC, "PID servo period")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "sec")
  field(INP, "@F460.protocol readFloat($(Sys)$(Dev),CONF:PID:RATE) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(Sys)$(Dev)Pid:Rate-SP") {
  field(DESC, "PID servo period")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeFloat($(Sys)$(Dev),CONF:PID:RATE) $(PORT) 0")
  field(EGU, "sec")
  field(DRVL, "5e-4")
  field(FLNK, "$(Sys)$(Dev)Pid:Rate-I")
  info(autosaveFields_pass0, "VAL")
}


# PID:SERV
#   Set (query) servo state
#   0 = disable
#   1 = enable
record(bo, "$(Sys)$(Dev)Pid:Enable-Out") {
  field(DESC, "PID enable")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(OUT, "@F460.protocol writeInt($(Sys)$(Dev),PID:SERV) $(PORT) 0")
  field(ZNAM, "PID off")
  field(ONAM, "PID on")
  field(FLNK, "$(Sys)$(Dev)Pid:Enable-Rbv")
  info(autosaveFields_pass0, "VAL")
}

record(seq, "$(Sys)$(Dev)Pid:Enable-Rbv") {
  field(DESC, "delay the readback")

  field(DLY1, "1")
  field(DOL1, "1")
  field(LNK1, "$(Sys)$(Dev)Pid:Cmd:Rd.PROC")
}

#
#
## FET:PID? [numSamples]
#    Fetch the running servo data.
#    {PID Enabled, DAC initial V, DAC V, AnalogIn1 V, Measured process value f(I1,I2,I3,I4), 
#     Target process value f(I1,I2,I3,I4), Sum of (TargetProcessValue-ActualProcessValue), 
#     Following error (TargetProcessValue-ActualProcessValue),DAC low limit hit (0|1), 
#     DAC high limit hit (0|1), low current limit hit (0|1),timestamp,time-slice number
#    May have additional fields if second PID is enabled.
#    Returns up to 9 samples.

record(bo, "$(Sys)$(Dev)Pid:Cmd:Rd") {
  field(DESC, "Read PID inputs")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(ZNAM, "Read PID")
  field(ONAM, "Read PID")
  field(OUT, "@F460.protocol get1PID($(Sys)$(Dev),Pid,PID) $(PORT) 0")
  field(FLNK, "$(Sys)$(Dev)Pid:Enable-I")
  #field(SCAN, "Passive")
  #field(SCAN, "1 second")
}

record(bi, "$(Sys)$(Dev)Pid:Enable-I") {
  # Enabled according to fetch
  field(DESC, "(PID enabled)")
  field(ONAM, "PID on")
  field(ZNAM, "PID off")
  field(FLNK, "$(Sys)$(Dev)Pid:InitV-I")
}

record(ai, "$(Sys)$(Dev)Pid:InitV-I") {
  field(DESC, "PID initial voltage")
  field(EGU, "V")
  field(PREC, "$(PREC)")
  field(FLNK, "$(Sys)$(Dev)Pid:Volts-I")
}

record(ai, "$(Sys)$(Dev)Pid:Volts-I") {
  field(DESC, "PID input voltage")
  field(EGU, "V")
  field(PREC, "$(PREC)")
  field(FLNK, "$(Sys)$(Dev)Pid:An1-I")
}

record(ai, "$(Sys)$(Dev)Pid:An1-I") {
  field(DESC, "PID analog in 1")
  field(EGU, "V")
  field(PREC, "$(PREC)")
  field(FLNK, "$(Sys)$(Dev)Pid:Proc:Meas-I")
}

record(ai, "$(Sys)$(Dev)Pid:Proc:Meas-I") {
  field(DESC, "PID measured process value")
  field(EGU, "")
  field(PREC, "$(PREC)")
  field(FLNK, "$(Sys)$(Dev)Pid:Proc:Tgt-I")
}

record(ai, "$(Sys)$(Dev)Pid:Proc:Tgt-I") {
  field(DESC, "PID target process value")
  field(EGU, "sec")
  field(PREC, "3")
  field(FLNK, "$(Sys)$(Dev)Pid:Proc:Diff-I")
}

record(ai, "$(Sys)$(Dev)Pid:Proc:Diff-I") {
  field(DESC, "PID target-actual")
  #field(FLNK, "$(Sys)$(Dev)Pid:FolErr-I")
  field(TPRO, 1)
}

record(ai, "$(Sys)$(Dev)Pid:FolErr-I") {
  field(DESC, "PID following error")
  field(TPRO, 1)
}

record(bi, "$(Sys)$(Dev)Pid:LowDac-I") {
  field(DESC, "PID low DAC limit")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(ZNAM, "Normal")
  field(ONAM, "Low limit")
}

record(bi, "$(Sys)$(Dev)Pid:HiDac-I") {
  field(DESC, "PID high DAC limit")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(ZNAM, "Normal")
  field(ONAM, "High limit")
}

record(bi, "$(Sys)$(Dev)Pid:LowI-I") {
  field(DESC, "PID low current limit")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(ZNAM, "Normal")
  field(ONAM, "Low limit")
}

record(ai, "$(Sys)$(Dev)Pid:Ts-I") {
  field(DESC, "PID timestamp")
}

record(ai, "$(Sys)$(Dev)Pid:TsNum-I") {
  field(DESC, "PID timeslice number")
}

